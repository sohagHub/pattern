/**
 * @file Defines all routes for the Services route.
 */

const express = require('express');
const fetch = require('node-fetch');

const router = express.Router();

const { asyncWrapper } = require('../middleware');
const plaid = require('../plaid');
const {
  handleTransactionsWebhook,
  handleItemWebhook,
  unhandledWebhook,
} = require('../webhookHandlers');

const {
  retrieveItemsByUser, retrieveItemByPlaidAccessToken
} = require('../db/queries');

const updateTransactions = require('../update_transactions');
const { retrieveTransactionById, justUpdateTransactions } = require('../db/queries/transactions');
const { get } = require('lodash');

/**
 * Returns the URL of the current public endpoint generated by ngrok.
 *
 * @returns {Object} the public endpoint currently active.
 */
router.get(
  '/ngrok',
  asyncWrapper(async (req, res) => {
    const response = await fetch('http://localhost:4040/api/tunnels');
    const { tunnels } = await response.json();
    const httpTunnel = tunnels.find(t => t.proto === 'http');
    res.json({ url: httpTunnel.public_url });
  })
);

/**
 * Handles incoming webhooks from Plaid.
 * https://plaid.com/docs/#webhooks
 */
router.post(
  '/webhook',
  asyncWrapper(async (req, res) => {
    const { webhook_type: webhookType } = req.body;
    const { io } = req;
    const type = webhookType.toLowerCase();
    // There are five types of webhooks: AUTH, TRANSACTIONS, ITEM, INCOME, and ASSETS.
    // @TODO implement handling for remaining webhook types.
    const webhookHandlerMap = {
      transactions: handleTransactionsWebhook,
      item: handleItemWebhook,
    };
    const webhookHandler = webhookHandlerMap[type] || unhandledWebhook;
    webhookHandler(req.body, io);
    res.json({ status: 'ok' });
  })
);

router.post(
  '/sync',
  asyncWrapper(async (req, res) => {
    try {
      const items = await retrieveItemsByUser(1);
      
      let userId;
      let institution;
      for (const item of items) {
        let plaidItemId; // Declare the variable outside of the try block
        try {
          const { plaid_item_id: plaidItemId } = item;
          userId = item.user_id;
          institution = await getInstitutionById(item.plaid_institution_id);
          const { addedCount, modifiedCount, removedCount } = await updateTransactions(plaidItemId);
          const logMessage = `Bank: ${institution.name}, Transactions: ${addedCount} added, ${modifiedCount} modified, ${removedCount} removed, ItemId: ${item.id}`;
          console.log(logMessage);
          req.io.emit('SYNC_HAPPENED', { itemId: plaidItemId, userId: userId, log: logMessage });
        } catch (err) {
          const logMessage = `Bank: ${institution.name}, ItemId: ${item.id}, Error: ${err.message}`;
          console.error(err);
          req.io.emit('SYNC_ERROR', { itemId: plaidItemId, userId: item.user_id, log: logMessage, errror: err });
        }
      }

      res.json({ status: 'ok' });
    } catch (err) {
      console.error(err);
      res.json({ status: 'error' });
    }
  })
);

router.put(
  '/transaction/:id',
  asyncWrapper(async (req, res) => {
    const id = req.params.id;
    const item = await retrieveTransactionById(id);
    // if not empty update
    item.name = req.body.name ? req.body.name : item.name;
    item.category = req.body.category ? req.body.category : item.category;
    item.subcategory = req.body.subcategory ? req.body.subcategory : item.subcategory;
    await justUpdateTransactions([item]);
    res.json({ status: 'ok' });
  })
);

/**
 * Fetches a single institution from the Plaid API by ID.
 *
 * @param {string} instId The ins_id of the institution to be returned.
 * @returns {Object[]} an array containing a single institution.
 */
const getInstitutionById = async (instId) => {
  const request = {
    institution_id: instId,
    country_codes: ['US'],
    options: {
      include_optional_metadata: true,
    },
  };
  try {
    const response = await plaid.institutionsGetById(request);
    const institution = response.data.institution;
    return institution;
  } catch (error) {
    console.error(error);
    // Handle error
  }
};

module.exports = router;
