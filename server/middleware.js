/**
 * @file Defines custom Express middleware functions.
 */

const Boom = require('@hapi/boom');
const jwt = require('jsonwebtoken');

const {
  PLAID_CLIENT_ID,
  PLAID_ENV,
  PLAID_SECRET_DEVELOPMENT,
  PLAID_SECRET_PRODUCTION,
} = process.env;

/**
 * A higher-order function that wraps an async callback to properly trigger the
 * Express error-handling middleware on errors.
 *
 * @param {Function} fn an async callback.
 * @returns {Function} an Express callback that resolves the wrapped async fn.
 */
const asyncWrapper = fn => (req, res, next) => {
  return Promise.resolve(fn(req, res, next)).catch(next);
};

/**
 * A catch-all error handler that sends a formatted JSON response.
 * Uses Boom to set the status code and provide consistent formatting.
 *
 * If using multiple error handlers, this should be the last one.
 *
 * @param {Object} err a javascript Error object.
 * @param {Object} req the Express request object.
 * @param {Object} res the Express response object.
 * @param {Function} next the Express next callback.
 */
const errorHandler = (err, req, res, next) => {
  let error = err;

  // handle errors from the Plaid api.
  if (error.name === 'PlaidError')
    error = new Boom(error.error_message, { statusCode: error.status_code });

  // handle standard javascript errors.
  if (!error.isBoom) error = Boom.boomify(error);

  // these are generated by Boom, so they're guaranteed to exist.
  const { statusCode, payload } = error.output;
  res.status(statusCode).json(payload);
};

const SECRET_KEY = PLAID_SECRET_PRODUCTION; // Store securely

const authenticateToken = (req, res, next) => {
  //const authHeader = req.headers['authorization'];
  //const token = authHeader && authHeader.split(' ')[1];
  const token = req.cookies.token;
  //console.log('sohag_token: ' + token);
  if (token == null) return res.sendStatus(401);

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};


module.exports = { asyncWrapper, errorHandler, authenticateToken };
